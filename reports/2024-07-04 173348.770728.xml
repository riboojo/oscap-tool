<?xml version="1.0" encoding="UTF-8"?>
<Benchmark xmlns="http://checklists.nist.gov/xccdf/1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="xccdf_org.ssgproject.content_benchmark_FIREFOX" resolved="1" xml:lang="en-US" style="SCAP_1.2">
  <status date="2024-06-10">draft</status>
  <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Guide to the Secure Configuration of Firefox</title>
  <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">This guide presents a catalog of security-relevant
configuration settings for Firefox. It is a rendering of
content structured in the eXtensible Configuration Checklist Description Format (XCCDF)
in order to support security automation.  The SCAP content is
is available in the <html:code xmlns:html="http://www.w3.org/1999/xhtml">scap-security-guide</html:code> package which is developed at

    <html:a xmlns:html="http://www.w3.org/1999/xhtml" href="https://www.open-scap.org/security-policies/scap-security-guide">https://www.open-scap.org/security-policies/scap-security-guide</html:a>.
<html:br xmlns:html="http://www.w3.org/1999/xhtml"/><html:br xmlns:html="http://www.w3.org/1999/xhtml"/>
Providing system administrators with such guidance informs them how to securely
configure systems under their control in a variety of network roles. Policy
makers and baseline creators can use this catalog of settings, with its
associated references to higher-level security control catalogs, in order to
assist them in security baseline creation. This guide is a <html:em xmlns:html="http://www.w3.org/1999/xhtml">catalog, not a
checklist</html:em>, and satisfaction of every item is not likely to be possible or
sensible in many operational scenarios. However, the XCCDF format enables
granular selection and adjustment of settings, and their association with OVAL
and OCIL content provides an automated checking capability. Transformations of
this document, and its associated automated checking content, are capable of
providing baselines that meet a diverse set of policy objectives. Some example
XCCDF <html:em xmlns:html="http://www.w3.org/1999/xhtml">Profiles</html:em>, which are selections of items that form checklists and
can be used as baselines, are available with this guide. They can be
processed, in an automated fashion, with tools that support the Security
Content Automation Protocol (SCAP). The DISA STIG for Firefox,
which provides required settings for US Department of Defense systems, is
one example of a baseline created from this guidance.
</description>
  <notice xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US" id="terms_of_use">Do not attempt to implement any of the settings in
this guide without first testing them in a non-operational environment. The
creators of this guidance assume no responsibility whatsoever for its use by
other parties, and makes no guarantees, expressed or implied, about its
quality, reliability, or any other characteristic.
</notice>
  <front-matter xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The SCAP Security Guide Project<html:br xmlns:html="http://www.w3.org/1999/xhtml"/>

    <html:a xmlns:html="http://www.w3.org/1999/xhtml" href="https://www.open-scap.org/security-policies/scap-security-guide">https://www.open-scap.org/security-policies/scap-security-guide</html:a>
</front-matter>
  <rear-matter xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Red Hat and Red Hat Enterprise Linux are either registered
trademarks or trademarks of Red Hat, Inc. in the United States and other
countries. All other names are registered trademarks or trademarks of their
respective companies.
</rear-matter>
  <reference href="https://cyber.gouv.fr/sites/default/files/document/linux_configuration-en-v2.pdf">anssi</reference>
  <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">app-srg</reference>
  <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=container-platform">app-srg-ctr</reference>
  <reference href="https://www.bsi.bund.de/SharedDocs/Downloads/EN/BSI/Grundschutz/International/bsi_it_gs_comp_2022.pdf">bsi</reference>
  <reference href="https://www.cisecurity.org/controls/">cis-csc</reference>
  <reference href="https://www.fbi.gov/file-repository/cjis-security-policy-v5_5_20160601-2-1.pdf">cjis</reference>
  <reference href="https://www.isaca.org/resources/cobit">cobit5</reference>
  <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-171.pdf">cui</reference>
  <reference href="not_officially_available">dcid</reference>
  <reference href="https://public.cyber.mil/stigs/cci/">disa</reference>
  <reference href="https://www.gpo.gov/fdsys/pkg/CFR-2007-title45-vol1/pdf/CFR-2007-title45-vol1-chapA-subchapC.pdf">hipaa</reference>
  <reference href="https://www.isa.org/products/isa-62443-2-1-2009-security-for-industrial-automat">isa-62443-2009</reference>
  <reference href="https://www.isa.org/products/ansi-isa-62443-3-3-99-03-03-2013-security-for-indu">isa-62443-2013</reference>
  <reference href="https://www.cyber.gov.au/acsc/view-all-content/ism">ism</reference>
  <reference href="https://www.iso.org/contents/data/standard/05/45/54534.html">iso27001-2013</reference>
  <reference href="https://www.nerc.com/pa/Stand/Standard%20Purpose%20Statement%20DL/US_Standard_One-Stop-Shop.xlsx">nerc-cip</reference>
  <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">nist</reference>
  <reference href="https://nvlpubs.nist.gov/nistpubs/CSWP/NIST.CSWP.04162018.pdf">nist-csf</reference>
  <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cgeneral-purpose-os">os-srg</reference>
  <reference href="https://www.niap-ccevs.org/Profile/PP.cfm">ospp</reference>
  <reference href="https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf">pcidss</reference>
  <reference href="https://docs-prv.pcisecuritystandards.org/PCI%20DSS/Standard/PCI-DSS-v4_0.pdf">pcidss4</reference>
  <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">stigid</reference>
  <reference href="https://public.cyber.mil/stigs/srg-stig-tools/">stigref</reference>
  <platform idref="cpe:/a:mozilla:firefox"/>
  <version update="https://github.com/ComplianceAsCode/content/releases/latest">0.1.73</version>
  <metadata xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <dc:publisher xmlns:dc="http://purl.org/dc/elements/1.1/">SCAP Security Guide Project</dc:publisher>
    <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">SCAP Security Guide Project</dc:creator>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Frank J Cameron (CAM1244) &lt;cameron@ctc.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">0x66656c6978 &lt;0x66656c6978@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">HÃ¥vard F. Aasen &lt;havard.f.aasen@pfft.no&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jack Adolph &lt;jack.adolph@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Edgar Aguilar &lt;edgar.aguilar@oracle.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">akuster &lt;akuster808@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Gabe Alford &lt;redhatrises@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Firas AlShafei &lt;firas.alshafei@us.abb.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Rodrigo Alvares &lt;ralvares@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Anderson &lt;cba@fedoraproject.org&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Craig Andrews &lt;candrews@integralblue.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">angystardust &lt;angystardust@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">anivan-suse &lt;anastasija.ivanovic@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">anixon-rh &lt;55244503+anixon-rh@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Stephen L Arnold &lt;sarnold@vctlabs.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Ikko Ashimine &lt;eltociear@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Chuck Atkins &lt;chuck.atkins@kitware.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Bharath B &lt;bhb@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Ryan Ballanger &lt;root@rballang-admin-2.fastenal.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Baranowski &lt;alex@euro-linux.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Eduardo Barretto &lt;eduardo.barretto@canonical.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Bastide &lt;pbastide@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Molly Jo Bault &lt;Molly.Jo.Bault@ballardtech.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Becker &lt;A-Beck@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriel Becker &lt;ggasparb@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">BenGui &lt;benoit.guillon1@etu.unilim.fr&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bergmann &lt;abergmann@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Dale Bewley &lt;dale@bewley.net&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jose Luis BG &lt;bgjoseluis@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">binyanling &lt;binyanling@uniontech.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Joseph Bisch &lt;joseph.bisch@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Blank &lt;blank@eclipse.ncsc.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Olivier Bonhomme &lt;ptitoliv@ptitoliv.net&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Lance Bragstad &lt;lbragstad@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Ted Brunell &lt;tbrunell@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Marcus Burghardt &lt;maburgha@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Matthew Burket &lt;mburket@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Blake Burkhart &lt;blake.burkhart@us.af.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Callahan &lt;pmc@patrickcallahan.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">George Campbell &lt;gcampbell@palantir.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Carboni &lt;ncarboni@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Carlos &lt;64919342+carlosmmatos@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">James Cassell &lt;james.cassell@ll.mit.edu&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Frank Caviggia &lt;fcaviggia@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Christensen &lt;echriste@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Dan Clark &lt;danclark@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jayson Cofell &lt;1051437+70k10@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">David du Colombier &lt;djc@datadoghq.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Commandcracker &lt;lukas.fricke.dev@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Caleb Cooper &lt;coopercd@ornl.gov&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">CoreyCook8 &lt;129206271+CoreyCook8@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">cortesana &lt;acortes@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Maciel Costa &lt;richard.maciel.costa@canonical.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Xavier Coulon &lt;xavier.coulon@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Deric Crago &lt;deric.crago@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">crleekwc &lt;crleekwc@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">cueball23 &lt;christoph.alms@westnetz.de&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">cyarbrough76 &lt;42849651+cyarbrough76@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Maura Dailey &lt;maura@eclipse.ncsc.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Klaas Demter &lt;demter@atix.de&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">denknorr &lt;dennis.knorr@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">dependabot[bot] &lt;49699333+dependabot[bot]@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">dhanushkar-wso2 &lt;dhanushkar@wso2.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew DiPrinzio &lt;andrew.diprinzio@jhuapl.edu&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">dom &lt;dominique.blaze@devinci.fr&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jean-Baptiste Donnette &lt;jean-baptiste.donnette@epita.fr&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Marco De Donno &lt;mdedonno1337@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">dperrone &lt;dperrone@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">drax &lt;applezip@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastian Dunne &lt;sdunne@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">FranÃ§ois Duthilleul &lt;francoisduthilleul@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Greg Elin &lt;gregelin@gitmachines.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">eradot4027 &lt;jrtonmac@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">ermeratos &lt;manuel.ermer@atos.net&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Alexis Facques &lt;alexis.facques@mythalesgroup.io&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Henry Finucane &lt;hfinucane@zscaler.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Leah Fisher &lt;lfisher047@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Yavor Georgiev &lt;strandjata@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Alijohn Ghassemlouei &lt;alijohn@secureagc.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Swarup Ghosh &lt;swghosh@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">ghylock &lt;ghylock@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Gilmore &lt;agilmore2@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Joshua Glemza &lt;jglemza@nasa.gov&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Gompper &lt;forestgomp@yahoo.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">David Fernandez Gonzalez &lt;david.fernandezgonzalez@canonical.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Loren Gordon &lt;lorengordon@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Gene Gotimer &lt;otherdevopsgene@portinfo.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Patrik Greco &lt;sikevux@sikevux.se&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Grubb &lt;sgrubb@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">guangyee &lt;gyee@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Christian Hagenest &lt;christian.hagenest@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Marek Haicman &lt;mhaicman@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Vern Hart &lt;vern.hart@canonical.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Haydock &lt;alex@alexhaydock.co.uk&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Rebekah Hayes &lt;rhayes@corp.rivierautilities.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Henefield &lt;thenefield@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Henning Henkel &lt;henning.henkel@helvetia.ch&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">hex2a &lt;hex2a@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">John Hooks &lt;jhooks@starscream.pa.jhbcomputers.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jakub Hrozek &lt;jhrozek@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">De Huo &lt;De.Huo@windriver.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Robin Price II &lt;robin@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Yasir Imam &lt;yimam@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jiri Jaburek &lt;jjaburek@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Keith Jackson &lt;keithkjackson@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Marc Jadoul &lt;mgjadoul@laptomatic.auth-o-matic.corp&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jeremiah Jahn &lt;jeremiah@goodinassociates.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jakub Jelen &lt;jjelen@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jessicahfy &lt;Jessicahfy@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Stephan Joerrens &lt;Stephan.Joerrens@fiduciagad.de&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Hunter Jones &lt;hjones2199@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jono &lt;jono@ubuntu-18.localdomain&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">justchris1 &lt;justchris1@justchris1.email&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Kacper &lt;kacper@kacper.se&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Kai Kang &lt;kai.kang@windriver.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Charles Kernstock &lt;charles.kernstock@ultra-ats.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Yuli Khodorkovskiy &lt;ykhodorkovskiy@tresys.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Sherine Khoury &lt;skhoury@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Nathan Kinder &lt;nkinder@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Lee Kinser &lt;lee.kinser@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Evgeny Kolesnikov &lt;ekolesni@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Peter 'Pessoft' KolÃ­nek &lt;github@pessoft.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Luke Kordell &lt;luke.t.kordell@lmco.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Malte Kraus &lt;malte.kraus@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Seth Kress &lt;seth.kress@dsainc.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Felix Krohn &lt;felix.krohn@helvetia.ch&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">kspargur &lt;kspargur@kspargur.csb&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Amit Kumar &lt;amitkuma@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Fen Labalme &lt;fen@civicactions.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Dexter Le &lt;dexter.le@sap.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Ade Lee &lt;alee@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Lee &lt;Crleekwc@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Lee &lt;lee1001@llnl.gov&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jarrett Lee &lt;jarrettl@umd.edu&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Joseph Lenox &lt;joseph.lenox@collins.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Lieskovsky &lt;jlieskov@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Markus Linnala &lt;Markus.Linnala@knowit.fi&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Flos Lonicerae &lt;lonicerae@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Lukasik &lt;slukasik@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Milan Lysonek &lt;mlysonek@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Fredrik LysÃ©n &lt;fredrik@pipemore.se&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Mackemania &lt;8738793+Mackemania@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Caitlin Macleod &lt;caitelatte@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Maludy &lt;nmaludy@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Lokesh Mandvekar &lt;lsm5@fedoraproject.org&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Matus Marhefka &lt;mmarhefk@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jamie Lorwey Martin &lt;jlmartin@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Carlos Matos &lt;cmatos@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Robert McAllister &lt;rmcallis@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Karen McCarron &lt;kmccarro@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Michael McConachie &lt;michael@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Marcus Meissner &lt;meissner@suse.de&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Khary Mendez &lt;kmendez@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Rodney Mercer &lt;rmercer@harris.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Micene &lt;nzwulfin@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Millett &lt;bmillett@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Takuya Mishina &lt;tmishina@jp.ibm.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Mixer9 &lt;35545791+Mixer9@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">mmosel &lt;mmosel@kde.example.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Montague &lt;montague.thomas@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Zbynek Moravec &lt;zmoravec@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Kazuo Moriwaka &lt;moriwaka@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Moseley &lt;michael@eclipse.ncsc.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Ross Murphy &lt;RossMurphy@ibm.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Renaud MÃ©trich &lt;rmetrich@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Joe Nall &lt;joe@nall.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Neiloy &lt;neiloy@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Axel Nennker &lt;axel@nennker.de&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Michele Newman &lt;mnewman@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">nnerdmann &lt;128606223+nnerdmann@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Sean O'Keeffe &lt;seanokeeffe797@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jiri Odehnal &lt;jodehnal@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Ilya Okomin &lt;ilya.okomin@oracle.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Kaustubh Padegaonkar &lt;theTuxRacer@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Palmiotto &lt;mpalmiotto@tresys.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Eryx Paredes &lt;eryxp@lyft.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Max R.D. Parmer &lt;maxp@trystero.is&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Arnaud Patard &lt;apatard@hupstream.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Pazdziora &lt;jpazdziora@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">pcactr &lt;paul.c.arnold4.ctr@mail.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Kenneth Peeples &lt;kennethwpeeples@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Nathan Peters &lt;Nathaniel.Peters@ca.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Frank Lin PIAT &lt;fpiat@klabs.be&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Pietsch &lt;mail.ipv4v6+gh@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">piggyvenus &lt;piggyvenus@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Vojtech Polasek &lt;vpolasek@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Orion Poplawski &lt;orion@nwra.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jennifer Power &lt;barnabei.jennifer@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Poyant &lt;npoyant@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Preisler &lt;mpreisle@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Wesley Ceraso Prudencio &lt;wcerasop@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Raphael Sanchez Prudencio &lt;rsprudencio@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Miha Purg &lt;miha.purg@canonical.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">T.O. Radzy Radzykewycz &lt;radzy@windriver.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">rain-Qing &lt;yangyuqing6@qq.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Kenyon Ralph &lt;kenyon@kenyonralph.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Ralph &lt;mralph@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Ramirez &lt;federico.r.ramirez@oracle.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">rchikov &lt;rumen.chikov@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Rick Renshaw &lt;Richard_Renshaw@xtoenergy.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Rensing &lt;prensing@cimetrics.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Reynolds &lt;c.reynolds82@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">rhayes &lt;rhayes@rivierautilities.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Pat Riehecky &lt;riehecky@fnal.gov&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">rlucente-se-jboss &lt;rlucente@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Juan Antonio Osorio Robles &lt;juan.osoriorobles@eu.equinix.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Roche &lt;paul.roche@menlosecurity.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Rodak &lt;hony.com@seznam.cz&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Rogers &lt;mrogers@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jesse Roland &lt;jesse.roland@onyxpoint.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Joshua Roys &lt;roysjosh@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">rrenshaw &lt;bofh69@yahoo.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Ruffalo &lt;chris.ruffalo@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Benjamin Ruland &lt;benjamin.ruland@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">rumch-se &lt;77793453+rumch-se@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Rutvik &lt;32413084+rutvik23@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">rutvik23 &lt;rutksh@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Ray Shaw (Cont ARL/CISD) rvshaw &lt;rvshaw@esme.arl.army.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Earl Sampson &lt;ESampson@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">sampsone &lt;esampson@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Willy Santos &lt;wsantos@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Nagarjuna Sarvepalli &lt;snagarju@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Anderson Sasaki &lt;33833274+ansasaki@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Gautam Satish &lt;gautams@hpe.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Watson Sato &lt;wsato@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Satoru SATOH &lt;satoru.satoh@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Scheel &lt;alexander.m.scheel@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Bryan Schneiders &lt;pschneiders@trisept.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Robert Schweikert &lt;rjschwei@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">shaneboulden &lt;shane.boulden@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Vincent Shen &lt;wenshen@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Dhriti Shikhar &lt;dhriti.shikhar.rokz@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Spencer Shimko &lt;sshimko@tresys.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Shoger &lt;mshoger@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Shane Siebken &lt;shane.siebken@capellaspace.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">THOBY Simon &lt;Simon.THOBY@viveris.fr&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas SjÃ¶gren &lt;konstruktoid@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jindrich Skacel &lt;102800748+jskacel@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Alexandre Skrzyniarz &lt;alexandre.skrzyniarz@laposte.net&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Francisco Slavin &lt;fslavin@tresys.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">sluetze &lt;13255307+sluetze@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Smith &lt;dsmith@eclipse.ncsc.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">David Smith &lt;dsmith@fornax.eclipse.ncsc.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Spargur &lt;kspargur@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Kenneth Stailey &lt;kstailey.lists@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Leland Steinke &lt;leland.j.steinke.ctr@mail.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Justin Stephenson &lt;jstephen@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">steven.y.gui &lt;steven_ygui@163.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Stinson &lt;brian@bstinson.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jake Stookey &lt;jakestookey@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Sturges &lt;jsturges@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">svet-se &lt;svetlin.boychev@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">teacup-on-rockingchair &lt;315160+teacup-on-rockingchair@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Tewksbury &lt;itewk@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Philippe Thierry &lt;phil@reseau-libre.net&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Simon THOBY &lt;git@nightmared.fr&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Derek Thurston &lt;thegrit@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">tianzhenjia &lt;jiatianzhen@cmss.chinamobile.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Greg Tinsley &lt;gtinsley@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Tittle &lt;ptittle@cmf.nrl.navy.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">tom &lt;tom@localhost.localdomain&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">tomas.hudik &lt;tomas.hudik@embedit.cz&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jeb Trayer &lt;jeb.d.trayer@uscg.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">TrilokGeer &lt;tgeer@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Viktors Trubovics &lt;viktors.trubovics@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Nico Truzzolino &lt;nico.truzzolino@gmx.de&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Turek &lt;brian.turek@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">MatÄj TÃ½Ä &lt;matyc@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">VadimDor &lt;29509093+VadimDor@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Trevor Vaughan &lt;tvaughan@onyxpoint.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">vtrubovics &lt;82443408+vtrubovics@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Samuel Warren &lt;swarren@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">wcushen &lt;54533890+wcushen@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Shawn Wells &lt;shawn@shawndwells.io&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Whidix &lt;31294015+Whidix@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel E. White &lt;linuxdan@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Bernhard M. Wiedemann &lt;bwiedemann@suse.de&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Roy Williams &lt;roywilli@roywilli.redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Willumpie &lt;willumpie@xs4all.nl&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Rob Wilmoth &lt;rwilmoth@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">win97pro &lt;win97pro@protonmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Lucas Yamanishi &lt;lucas.yamanishi@onyxpoint.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Xirui Yang &lt;xirui.yang@oracle.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Yuqing Yang &lt;yyq01323329@alibaba-inc.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">yarunachalam &lt;yarunachalam@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Guang Yee &lt;guang.yee@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Achilleas John Yfantis &lt;ayfantis@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">YiLin.Li &lt;YiLin.Li@linux.alibaba.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">YuQing &lt;yyq0391@163.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Zimmerman &lt;kevin.zimmerman@kitware.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Luigi Mario Zuccarelli &lt;luzuccar@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jan ÄernÃ½ &lt;jcerny@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Å rubaÅ &lt;msrubar@redhat.com&gt;</dc:contributor>
    <dc:source xmlns:dc="http://purl.org/dc/elements/1.1/">https://github.com/ComplianceAsCode/content/releases/latest</dc:source>
  </metadata>
  <model system="urn:xccdf:scoring:default"/>
  <Profile id="xccdf_org.ssgproject.content_profile_cusp_firefox">
    <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US" override="true">CUSP - Common User Security Profile for Mozilla Firefox</title>
    <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US" override="true">This profile contains rules to harden Mozilla Firefox according to rule 6.1 in the Common User Security Guide for Fedora Workstation.</description>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-autoplay_video" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-content_blocker" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-cryptomining" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-enhanced_tracking" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-fingerprinting_protection" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-javascript_window_changes" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-javascript_window_resizing" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-pop-up_windows" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-ssl_minimum_version" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_group_firefox_preferences-dod_root_certificate" selected="false"/>
  </Profile>
  <Profile id="xccdf_org.ssgproject.content_profile_stig">
    <version>V6R3</version>
    <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US" override="true">Mozilla Firefox STIG</title>
    <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US" override="true">This profile is developed under the DoD consensus model and DISA FSO Vendor STIG process,
serving as the upstream development environment for the Firefox STIG.

As a result of the upstream/downstream relationship between the SCAP Security Guide project
and the official DISA FSO STIG baseline, users should expect variance between SSG and DISA FSO content.
For official DISA FSO STIG content, refer to https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance.

While this profile is packaged by Red Hat as part of the SCAP Security Guide package, please note
that commercial support of this SCAP content is NOT available. This profile is provided as example
SCAP content with no endorsement for suitability or production readiness. Support for this
profile is provided by the upstream SCAP Security Guide community on a best-effort basis. The
upstream project homepage is https://www.open-scap.org/security-policies/scap-security-guide/.</description>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-addons_permission" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-autoplay_video" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-cryptomining" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-development_tools" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-disable_deprecated_ciphers" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-disable_form_history" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-disable_pocket" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-disable_studies" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-dns_over_https" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-encrypted_media_extensions" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-enhanced_tracking" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-extension_recommendation" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-extension_update" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-feedback_reporting" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-fingerprinting_protection" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-forget_button" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-javascript_window_changes" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-javascript_window_resizing" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-network_prediction" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-no_sanitize_on_shutdown" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-nonessential_capabilities" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-password_manager" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-pop-up_windows" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-private_browsing" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-search_suggestion" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-search_update" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-ssl_minimum_version" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-sync" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-telemetry" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-user_messaging" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_policy-verification" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-auto-download_actions" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-dod_root_certificate_installed" selected="true"/>
    <select idref="xccdf_org.ssgproject.content_rule_installed_firefox_version_supported" selected="true"/>
    <refine-value idref="xccdf_org.ssgproject.content_value_var_default_home_page" selector="about_blank"/>
  </Profile>
  <Group id="xccdf_org.ssgproject.content_group_firefox">
    <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox</title>
    <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox is an open-source web browser and developed by Mozilla.
Web browsers such as Firefox are used for a number of reasons. This section
provides settings for configuring Firefox policies to meet compliance
settings for Firefox running on Red Hat Enterprise Linux systems.

<html:ul xmlns:html="http://www.w3.org/1999/xhtml">Refer to <html:li><html:a href="http://kb.mozillazine.org/Firefox_:_FAQs_:_About:config_Entries">http://kb.mozillazine.org/Firefox_:_FAQs_:_About:config_Entries</html:a></html:li>
for a list of currently supported Firefox settings.</html:ul></description>
    <Value id="xccdf_org.ssgproject.content_value_var_default_home_page" type="string">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The Default Firefox Home Page</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The default home page for Firefox users.</description>
      <value selector="about_blank">about:blank</value>
      <value>None</value>
    </Value>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-addons_permission" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox must be configured to disable the installation of extensions.</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Addon installation may be disabled in an administrative policy by setting
the <html:code xmlns:html="http://www.w3.org/1999/xhtml">InstallAddonsPermission</html:code> key under <html:code xmlns:html="http://www.w3.org/1999/xhtml">policies</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">false</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000013</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">A browser extension is a program that has been installed into the browser to add functionality. Where a plug-in interacts only with a web page and usually a third-party external application (e.g., Flash, Adobe Reader), an extension interacts with the browser program itself. Extensions are not embedded in web pages and must be downloaded and installed in order to work. Extensions allow browsers to avoid restrictions that apply to web pages.
For example, an extension can be written to combine data from multiple domains and present it when a certain page is accessed, which can be considered cross-site scripting. If a browser is configured to allow unrestricted use of extensions, plug-ins can be loaded and installed from malicious sources and used on the browser.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-addons_permission" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'InstallAddonsPermission' in _tree['policies']:
   pass
else:
   _tree['policies']['InstallAddonsPermission'] = dict()

_tree['policies']['InstallAddonsPermission']['Default'] = False

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-addons_permission:def:1" href="ssg-firefox-oval.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-autoplay_video" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox autoplay must be disabled.</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Audio/Video autoplay may be disabled in an administrative policy by setting
the <html:code xmlns:html="http://www.w3.org/1999/xhtml">Default</html:code> key under <html:code xmlns:html="http://www.w3.org/1999/xhtml">Permissions</html:code>, <html:code xmlns:html="http://www.w3.org/1999/xhtml">Autoplay</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">"block-audio-video"</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000021</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Autoplay allows the user to control whether videos can play automatically (without user consent) with audio content. The user must be able to select content that is run within the browser window.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-autoplay_video" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'Permissions' in _tree['policies']:
   pass
else:
   _tree['policies']['Permissions'] = dict()

if 'Autoplay' in _tree['policies']['Permissions']:
   pass
else:
   _tree['policies']['Permissions']['Autoplay'] = dict()

_tree['policies']['Permissions']['Autoplay']['Default'] = 'block-audio-video'

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-autoplay_video:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-autoplay_video_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-content_blocker" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Ensure the Content Blocker uBlock Origin is Installed</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The uBlock Origin will be installed automatically by configuring Firefox policy, and updates will be enabled. It can also be installed through the Mozilla Add-Ons store at https://addons.mozilla.org/en-US/firefox/addon/ublock-origin/.</description>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The content blocking feature of uBlock Origin stops Firefox from loading content from malicious sites. The content might be a script or an image, for example. If a site is on one of the lists uBlock Origin uses, then the content will not be loaded from that site.
This may prevent malicious ads from confusing users and concealing the page contents, as well as the loading of content that may contain malware.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-content_blocker" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'ExtensionSettings' in _tree['policies']:
   pass
else:
   _tree['policies']['ExtensionSettings'] = dict()

if 'uBlock0@raymondhill.net' in _tree['policies']['ExtensionSettings']:
   pass
else:
   _tree['policies']['ExtensionSettings']['uBlock0@raymondhill.net'] = dict()

_tree['policies']['ExtensionSettings']['uBlock0@raymondhill.net']['installation_mode'] = 'normal_installed'


if 'ExtensionSettings' in _tree['policies']:
   pass
else:
   _tree['policies']['ExtensionSettings'] = dict()

if 'uBlock0@raymondhill.net' in _tree['policies']['ExtensionSettings']:
   pass
else:
   _tree['policies']['ExtensionSettings']['uBlock0@raymondhill.net'] = dict()

_tree['policies']['ExtensionSettings']['uBlock0@raymondhill.net']['install_url'] = 'https://addons.mozilla.org/firefox/downloads/latest/ublock-origin/latest.xpi'


if 'ExtensionSettings' in _tree['policies']:
   pass
else:
   _tree['policies']['ExtensionSettings'] = dict()

if 'uBlock0@raymondhill.net' in _tree['policies']['ExtensionSettings']:
   pass
else:
   _tree['policies']['ExtensionSettings']['uBlock0@raymondhill.net'] = dict()

_tree['policies']['ExtensionSettings']['uBlock0@raymondhill.net']['updates_disabled'] = False

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-content_blocker:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-content_blocker_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-cryptomining" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Enabled Firefox Cryptomining protection</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Cryptomining protection may be enabled by setting
<html:code xmlns:html="http://www.w3.org/1999/xhtml">privacy.trackingprotection.cryptomining.enabled</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000024</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The Content Blocking/Tracking Protection feature stops Firefox from loading content from malicious sites. The content might be a script or an image, for example. If a site is on one of the tracker lists you set Firefox to use, then the fingerprinting script (or other tracking script/image) will not be loaded from that site.
Cryptomining scripts use your computerâs central processing unit (CPU) to invisibly mine cryptocurrency.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-cryptomining" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'EnableTrackingProtection' in _tree['policies']:
   pass
else:
   _tree['policies']['EnableTrackingProtection'] = dict()

_tree['policies']['EnableTrackingProtection']['Cryptomining'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-cryptomining:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-cryptomining_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-development_tools" selected="false" role="full" severity="low">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable Firefox Development Tools</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox provides development tools which identify detailed information 
about the browser and its configuration. These details are often also 
recorded into a log file, giving an attacker the ability to capture 
detailed information about the system.
This can be disabled by setting <html:code xmlns:html="http://www.w3.org/1999/xhtml">DisableDeveloperTools</html:code> to
<html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code> in <html:code xmlns:html="http://www.w3.org/1999/xhtml">policies.json</html:code></description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-001312</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SI-11 b</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000015</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">In order to protect privacy and sensitive data, Mozilla provides
the ability to configure Firefox so that development tools are prevented from being used.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-development_tools" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['DisableDeveloperTools'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-development_tools:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-development_tools_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-disable_deprecated_ciphers" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable Firefox deprecated ciphers</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Pocket may be disabled by setting
<html:code xmlns:html="http://www.w3.org/1999/xhtml">TLS_RSA_WITH_3DES_EDE_CBC_SHA</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code> under <html:code xmlns:html="http://www.w3.org/1999/xhtml">DisabledCiphers</html:code>
in the policies file.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000027</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Weak ciphers are encryption/decryption algorithms that use keys of insufficient length. Using an insufficient length for a key increases
the probability that the encryption scheme could be broken.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-disable_deprecated_ciphers" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'DisabledCiphers' in _tree['policies']:
   pass
else:
   _tree['policies']['DisabledCiphers'] = dict()

_tree['policies']['DisabledCiphers']['TLS_RSA_WITH_3DES_EDE_CBC_SHA'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-disable_deprecated_ciphers:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-disable_deprecated_ciphers_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-disable_form_history" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox must be configured to disable form fill assistance.</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The update check may be disabled in an administrative policy by setting
the <html:code xmlns:html="http://www.w3.org/1999/xhtml">DisableFormHistory</html:code> key under <html:code xmlns:html="http://www.w3.org/1999/xhtml">policies</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000007</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To protect privacy and sensitive data, Firefox provides the ability to configure the program so that data entered into forms is not saved. This mitigates the risk of a website gleaning private information from prefilled information.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-disable_form_history" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['DisableFormHistory'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-disable_form_history:def:1" href="ssg-firefox-oval.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-disable_pocket" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable Firefox Pocket</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Pocket may be disabled by setting
<html:code xmlns:html="http://www.w3.org/1999/xhtml">DisablePocket</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code>
in the policies file.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000038</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Pocket is a social bookmarking service for storing, sharing, and discovering web bookmarks.
Data gathering cloud services such as Pocket are generally disabled in the DoD.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-disable_pocket" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['DisablePocket'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-disable_pocket:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-disable_pocket_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-disable_studies" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable Firefox Studies</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Pocket may be disabled by setting
<html:code xmlns:html="http://www.w3.org/1999/xhtml">DisableFirefoxStudies</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code>
in the policies file.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000039</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Studies try out different features and ideas prior to release to all Firefox users. Testing beta software is not in the DoD user's mission.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-disable_studies" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['DisableFirefoxStudies'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-disable_studies:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-disable_studies_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-dns_over_https" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox must be configured so that DNS over HTTPS is disabled.</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">DNS over HTTPS feature may be disabled via administrative policy by setting
<html:code xmlns:html="http://www.w3.org/1999/xhtml">Enabled</html:code> under <html:code xmlns:html="http://www.w3.org/1999/xhtml">DNSOverHTTPS</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">false</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000033</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">DNS over HTTPS has generally not been adopted in the DoD. DNS is tightly controlled.
It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. These unnecessary capabilities or services are often overlooked and therefore may remain unsecured. They increase the risk to the platform by providing additional attack vectors.
Applications are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).
Examples of non-essential capabilities include but are not limited to advertising software or browser plug-ins that are not related to requirements or provide a wide array of functionality not required for every mission but that cannot be disabled.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-dns_over_https" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'DNSOverHTTPS' in _tree['policies']:
   pass
else:
   _tree['policies']['DNSOverHTTPS'] = dict()

_tree['policies']['DNSOverHTTPS']['Enabled'] = False

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-dns_over_https:def:1" href="ssg-firefox-oval.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-encrypted_media_extensions" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox encrypted media extensions must be disabled.</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox's Encrypted Media Extensions support playback of media content that is subject to Digital Right Management.
These extensions may be disabled completely by setting
<html:ul xmlns:html="http://www.w3.org/1999/xhtml"><html:li><html:code>Enabled</html:code> under <html:code>EncryptedMediaExtensions</html:code> to <html:code>false</html:code></html:li><html:li><html:code>Locked</html:code> under <html:code>EncryptedMediaExtensions</html:code> to <html:code>true</html:code></html:li></html:ul>.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000037</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Enable or disable Encrypted Media Extensions and optionally lock it.
If "Enabled" is set to "false", Firefox does not download encrypted media extensions (such as Widevine) unless the user consents to installing them.
If "Locked" is set to "true" and "Enabled" is set to "false", Firefox will not download encrypted media extensions (such as Widevine) or ask the user to install them.
It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. These unnecessary capabilities or services are often overlooked and therefore may remain unsecured. They increase the risk to the platform by providing additional attack vectors.
Applications are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).
Examples of non-essential capabilities include but are not limited to advertising software or browser plug-ins that are not related to requirements or provide a wide array of functionality not required for every mission but that cannot be disabled.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-encrypted_media_extensions" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'EncryptedMediaExtensions' in _tree['policies']:
   pass
else:
   _tree['policies']['EncryptedMediaExtensions'] = dict()

_tree['policies']['EncryptedMediaExtensions']['Enabled'] = False


if 'EncryptedMediaExtensions' in _tree['policies']:
   pass
else:
   _tree['policies']['EncryptedMediaExtensions'] = dict()

_tree['policies']['EncryptedMediaExtensions']['Locked'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-encrypted_media_extensions:def:1" href="ssg-firefox-oval.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-enhanced_tracking" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Enabled Firefox Enhanced Tracking Protection</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Enhanced Tracking Protection may be enabled by setting
<html:code xmlns:html="http://www.w3.org/1999/xhtml">browser.contentblocking.category</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">strict</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000025</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Tracking generally refers to content, cookies, or scripts that can collect your browsing data across multiple sites.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-enhanced_tracking" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'browser.contentblocking.category' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['browser.contentblocking.category'] = dict()

_tree['policies']['Preferences']['browser.contentblocking.category']['Value'] = 'strict'


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'browser.contentblocking.category' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['browser.contentblocking.category'] = dict()

_tree['policies']['Preferences']['browser.contentblocking.category']['Status'] = 'locked'

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-enhanced_tracking:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-enhanced_tracking_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-extension_recommendation" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disabled Firefox Extension Recommendations</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Extension recommendations may be disabled by setting
<html:code xmlns:html="http://www.w3.org/1999/xhtml">extensions.htmlaboutaddons.recommendations.enabled</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">false</html:code> in the policy file.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000026</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The Recommended Extensions program will make it easier for users to discover extensions that have been reviewed for security, functionality, and user experience.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-extension_recommendation" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'extensions.htmlaboutaddons.recommendations.enabled' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['extensions.htmlaboutaddons.recommendations.enabled'] = dict()

_tree['policies']['Preferences']['extensions.htmlaboutaddons.recommendations.enabled']['Value'] = False


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'extensions.htmlaboutaddons.recommendations.enabled' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['extensions.htmlaboutaddons.recommendations.enabled'] = dict()

_tree['policies']['Preferences']['extensions.htmlaboutaddons.recommendations.enabled']['Status'] = 'locked'

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-extension_recommendation:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-extension_recommendation_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-extension_update" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox must be configured to not automatically update installed add-ons and plugins.</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox has a feature to permit installed add-ons and plugins to automatically update. The check may be disabled in an
administrative policy by setting the <html:code xmlns:html="http://www.w3.org/1999/xhtml">ExtensionUpdate</html:code> key under <html:code xmlns:html="http://www.w3.org/1999/xhtml">policies</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">false</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000005</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Automatic updates from untrusted sites puts the entire enclave at risk and may override existing security settings.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-extension_update" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['ExtensionUpdate'] = False

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-extension_update:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-extension_update_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-feedback_reporting" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox feedback reporting must be disabled.</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Feedback reporting feature may be disabled via administrative policy by setting
<html:code xmlns:html="http://www.w3.org/1999/xhtml">DisableFeedbackCommands</html:code> under <html:code xmlns:html="http://www.w3.org/1999/xhtml">policies</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000036</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable the menus for reporting sites (Submit Feedback, Report Deceptive Site). 
It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. These unnecessary capabilities or services are often overlooked and therefore may remain unsecured. They increase the risk to the platform by providing additional attack vectors.
Applications are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).
Examples of non-essential capabilities include but are not limited to advertising software or browser plug-ins that are not related to requirements or provide a wide array of functionality not required for every mission but that cannot be disabled.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-feedback_reporting" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['DisableFeedbackCommands'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-feedback_reporting:def:1" href="ssg-firefox-oval.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-fingerprinting_protection" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Enabled Firefox Fingerprinting Protection</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Fingerprinting protection may be enabled by setting
<html:code xmlns:html="http://www.w3.org/1999/xhtml">Fingerprinting</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code> under <html:code xmlns:html="http://www.w3.org/1999/xhtml">EnableTrackingProtection</html:code>
in the policies file.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000023</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The Content Blocking/Tracking Protection feature stops Firefox from loading content from malicious sites. The content might be a script or an image, for example. If a site is on one of the tracker lists you set Firefox to use, then the fingerprinting script (or other tracking script/image) will not be loaded from that site.
Fingerprinting scripts collect information about your browser and device configuration, such as your operating system, screen resolution, and other settings. By compiling these pieces of data, fingerprinters create a unique profile of you that can be used to track you around the Web.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-fingerprinting_protection" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'EnableTrackingProtection' in _tree['policies']:
   pass
else:
   _tree['policies']['EnableTrackingProtection'] = dict()

_tree['policies']['EnableTrackingProtection']['Fingerprinting'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-fingerprinting_protection:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-fingerprinting_protection_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-forget_button" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox must prevent the user from quickly deleting data.</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The update check may be disabled in an administrative policy by setting
the <html:code xmlns:html="http://www.w3.org/1999/xhtml">DisableForgetButton</html:code> key under <html:code xmlns:html="http://www.w3.org/1999/xhtml">policies</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-002355</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">AC-24(2)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000018</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">There should not be an option for a user to "forget" work they have done. This is required to meet non-repudiation controls.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-forget_button" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['DisableForgetButton'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-forget_button:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-forget_button_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-javascript_window_changes" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable JavaScript's Raise Or Lower Windows Capability</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">JavaScript can configure and make changes to the web browser's appearance by
specifically raising and lowering windows. This can be disabled by
setting <html:code xmlns:html="http://www.w3.org/1999/xhtml">dom.disable_window_flip</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code> in the policy file.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000011</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">JavaScript can make changes to the browserâs appearance. Allowing a website
to use JavaScript to raise and lower browser windows may disguise an attack.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-javascript_window_changes" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'dom.disable_window_flip' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['dom.disable_window_flip'] = dict()

_tree['policies']['Preferences']['dom.disable_window_flip']['Value'] = True


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'dom.disable_window_flip' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['dom.disable_window_flip'] = dict()

_tree['policies']['Preferences']['dom.disable_window_flip']['Status'] = 'locked'

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-javascript_window_changes:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-javascript_window_changes_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-javascript_window_resizing" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable JavaScript's Moving Or Resizing Windows Capability</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">JavaScript can configure and make changes to the web browser's appearance by
specifically moving and resizing browser windows. This can be disabled by
setting <html:code xmlns:html="http://www.w3.org/1999/xhtml">dom.disable_window_move_resize</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code> in the policy file.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000010</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">JavaScript can make changes to the browserâs appearance. This activity
can help disguise an attack taking place in a minimized background window.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-javascript_window_resizing" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'dom.disable_window_move_resize' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['dom.disable_window_move_resize'] = dict()

_tree['policies']['Preferences']['dom.disable_window_move_resize']['Value'] = True


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'dom.disable_window_move_resize' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['dom.disable_window_move_resize'] = dict()

_tree['policies']['Preferences']['dom.disable_window_move_resize']['Status'] = 'locked'

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-javascript_window_resizing:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-javascript_window_resizing_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-network_prediction" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable Firefox network prediction</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox has a feature where it predicts and caches DNS requests.
This can be disabled by
setting <html:code xmlns:html="http://www.w3.org/1999/xhtml">NetworkPrediction</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code> in the policy file.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000022</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">With network prediction enabled, URL requests are made without user consent.
Browsers should always make a direct DNS request with prefetching. </rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-network_prediction" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['NetworkPrediction'] = False

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-network_prediction:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-network_prediction_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-no_sanitize_on_shutdown" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox must be configured to not delete data upon shutdown.</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The default certificate to present may be configured by setting multiple options
under <html:code xmlns:html="http://www.w3.org/1999/xhtml">SanitizeOnShutdown</html:code> key.
<html:ul xmlns:html="http://www.w3.org/1999/xhtml"><html:li><html:code>Cache</html:code> = <html:code>false</html:code></html:li></html:ul></description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7 a</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000017</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">For diagnostic purposes, data must remain behind when the browser is closed. This is required to meet non-repudiation controls.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-no_sanitize_on_shutdown" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'SanitizeOnShutdown' in _tree['policies']:
   pass
else:
   _tree['policies']['SanitizeOnShutdown'] = dict()

_tree['policies']['SanitizeOnShutdown']['Cache'] = False


if 'SanitizeOnShutdown' in _tree['policies']:
   pass
else:
   _tree['policies']['SanitizeOnShutdown'] = dict()

_tree['policies']['SanitizeOnShutdown']['Cookies'] = False


if 'SanitizeOnShutdown' in _tree['policies']:
   pass
else:
   _tree['policies']['SanitizeOnShutdown'] = dict()

_tree['policies']['SanitizeOnShutdown']['Downloads'] = False


if 'SanitizeOnShutdown' in _tree['policies']:
   pass
else:
   _tree['policies']['SanitizeOnShutdown'] = dict()

_tree['policies']['SanitizeOnShutdown']['FormData'] = False


if 'SanitizeOnShutdown' in _tree['policies']:
   pass
else:
   _tree['policies']['SanitizeOnShutdown'] = dict()

_tree['policies']['SanitizeOnShutdown']['History'] = False


if 'SanitizeOnShutdown' in _tree['policies']:
   pass
else:
   _tree['policies']['SanitizeOnShutdown'] = dict()

_tree['policies']['SanitizeOnShutdown']['Sessions'] = False


if 'SanitizeOnShutdown' in _tree['policies']:
   pass
else:
   _tree['policies']['SanitizeOnShutdown'] = dict()

_tree['policies']['SanitizeOnShutdown']['SiteSettings'] = False


if 'SanitizeOnShutdown' in _tree['policies']:
   pass
else:
   _tree['policies']['SanitizeOnShutdown'] = dict()

_tree['policies']['SanitizeOnShutdown']['OfflineApps'] = False


if 'SanitizeOnShutdown' in _tree['policies']:
   pass
else:
   _tree['policies']['SanitizeOnShutdown'] = dict()

_tree['policies']['SanitizeOnShutdown']['Locked'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-no_sanitize_on_shutdown:def:1" href="ssg-firefox-oval.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-nonessential_capabilities" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The Firefox New Tab page must not show Top Sites, Sponsored Top sites, Pocket Recommendations, Sponsored Pocket Stories, Searches, Highlights, or Snippets.</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Display of top sites may be disabled in an administrative policy by setting the following items under <html:code xmlns:html="http://www.w3.org/1999/xhtml">FirefoxHome</html:code>
to <html:code xmlns:html="http://www.w3.org/1999/xhtml">false</html:code> and by setting the <html:code xmlns:html="http://www.w3.org/1999/xhtml">locked</html:code> key to <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code>.
<html:code xmlns:html="http://www.w3.org/1999/xhtml">Search</html:code>
<html:code xmlns:html="http://www.w3.org/1999/xhtml">TopSites</html:code>
<html:code xmlns:html="http://www.w3.org/1999/xhtml">SponsoredTopSites</html:code>
<html:code xmlns:html="http://www.w3.org/1999/xhtml">Pocket</html:code>
<html:code xmlns:html="http://www.w3.org/1999/xhtml">SponsoredPocket</html:code>
<html:code xmlns:html="http://www.w3.org/1999/xhtml">Highlights</html:code>
<html:code xmlns:html="http://www.w3.org/1999/xhtml">Snippets</html:code></description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000029</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The New Tab page by default shows a list of built-in top sites, as well as the top sites the user has visited.
It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. These unnecessary capabilities or services are often overlooked and therefore may remain unsecured. They increase the risk to the platform by providing additional attack vectors.
Applications are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).
Examples of non-essential capabilities include but are not limited to advertising software or browser plug-ins that are not related to requirements or provide a wide array of functionality not required for every mission but that cannot be disabled.
The new tab page must not actively show user activity.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-nonessential_capabilities" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'FirefoxHome' in _tree['policies']:
   pass
else:
   _tree['policies']['FirefoxHome'] = dict()

_tree['policies']['FirefoxHome']['Search'] = False


if 'FirefoxHome' in _tree['policies']:
   pass
else:
   _tree['policies']['FirefoxHome'] = dict()

_tree['policies']['FirefoxHome']['TopSites'] = False


if 'FirefoxHome' in _tree['policies']:
   pass
else:
   _tree['policies']['FirefoxHome'] = dict()

_tree['policies']['FirefoxHome']['SponsoredTopSites'] = False


if 'FirefoxHome' in _tree['policies']:
   pass
else:
   _tree['policies']['FirefoxHome'] = dict()

_tree['policies']['FirefoxHome']['Pocket'] = False


if 'FirefoxHome' in _tree['policies']:
   pass
else:
   _tree['policies']['FirefoxHome'] = dict()

_tree['policies']['FirefoxHome']['SponsoredPocket'] = False


if 'FirefoxHome' in _tree['policies']:
   pass
else:
   _tree['policies']['FirefoxHome'] = dict()

_tree['policies']['FirefoxHome']['Highlights'] = False


if 'FirefoxHome' in _tree['policies']:
   pass
else:
   _tree['policies']['FirefoxHome'] = dict()

_tree['policies']['FirefoxHome']['Snippets'] = False


if 'FirefoxHome' in _tree['policies']:
   pass
else:
   _tree['policies']['FirefoxHome'] = dict()

_tree['policies']['FirefoxHome']['locked'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-nonessential_capabilities:def:1" href="ssg-firefox-oval.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-password_manager" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox must be configured to not use a password store with or without a master password.</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The update check may be disabled in an administrative policy by setting
the <html:code xmlns:html="http://www.w3.org/1999/xhtml">PasswordManager</html:code> key under <html:code xmlns:html="http://www.w3.org/1999/xhtml">policies</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">false</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000008</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox can be set to store passwords for sites visited by the user. These individual passwords are stored in a file and can be protected by a master password. Autofill of the password can then be enabled when the site is visited. This feature could also be used to autofill the certificate PIN, which could lead to compromise of DoD information.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-password_manager" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['PasswordManagerEnabled'] = False

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-password_manager:def:1" href="ssg-firefox-oval.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-pop-up_windows" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Enable Firefox Pop-up Blocker</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The pop-up blocker can be enabled by setting
<html:code xmlns:html="http://www.w3.org/1999/xhtml">Default</html:code> key under <html:code xmlns:html="http://www.w3.org/1999/xhtml">PopupBlocking</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code> in <html:code xmlns:html="http://www.w3.org/1999/xhtml">policies.json</html:code>.
<html:code xmlns:html="http://www.w3.org/1999/xhtml">Allowed</html:code> may be set to a list of sites allowed to use popups. </description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000009</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Popup windows may be used to launch an attack within a new browser window
with altered settings.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-pop-up_windows" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'PopupBlocking' in _tree['policies']:
   pass
else:
   _tree['policies']['PopupBlocking'] = dict()

_tree['policies']['PopupBlocking']['Default'] = True


if 'PopupBlocking' in _tree['policies']:
   pass
else:
   _tree['policies']['PopupBlocking'] = dict()

_tree['policies']['PopupBlocking']['Locked'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-pop-up_windows:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-pop-up_windows_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-private_browsing" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox private browsing must be disabled.</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Private browsing may be disabled in an administrative policy by setting
the <html:code xmlns:html="http://www.w3.org/1999/xhtml">DisablePrivateBrowsing</html:code> key under <html:code xmlns:html="http://www.w3.org/1999/xhtml">policies</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000019</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Private browsing allows the user to browse the internet without recording their browsing history/activity. From a forensics perspective, this is unacceptable. Best practice requires that browser history is retained.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-private_browsing" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['DisablePrivateBrowsing'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-private_browsing:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-private_browsing_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-search_suggestion" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox search suggestions must be disabled.</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Search Suggestions may be disabled in an administrative policy by setting
the <html:code xmlns:html="http://www.w3.org/1999/xhtml">SearchSuggestEnabled</html:code> key under <html:code xmlns:html="http://www.w3.org/1999/xhtml">policies</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">false</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000020</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Search suggestions must be disabled as this could lead to searches being conducted that were never intended to be made.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-search_suggestion" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['SearchSuggestEnabled'] = False

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-search_suggestion:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-search_suggestion_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-search_update" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable Installed Search Plugins Update Checking</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox automatically checks for updated versions of search plugins.
To disable the automatic updates of plugins, set value of
<html:code xmlns:html="http://www.w3.org/1999/xhtml">browser.search.update</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">false</html:code> via policies.json.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000004</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Updates need to be controlled and installed from authorized and trusted servers.
This setting overrides a number of other settings which may direct the application
to access external URLs.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-search_update" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'browser.search.update' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['browser.search.update'] = dict()

_tree['policies']['Preferences']['browser.search.update']['Value'] = False


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'browser.search.update' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['browser.search.update'] = dict()

_tree['policies']['Preferences']['browser.search.update']['Status'] = 'locked'

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-search_update:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-search_update_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-ssl_minimum_version" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox must be configured to allow only TLS 1.2 or above.</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox may be configured via administrative policy to allow TLS 1.2 at minimum
by setting <html:code xmlns:html="http://www.w3.org/1999/xhtml">SSLVersionMin</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">tls1.2</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-001453</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">AC-17 (2)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000002</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Use of versions prior to TLS 1.2 are not permitted. SSL 2.0 and SSL 3.0 contain a number of security flaws. 
These versions must be disabled in compliance with the Network Infrastructure and Secure Remote Computing STIGs.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-ssl_minimum_version" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['SSLVersionMin'] = 'tls1.2'

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-ssl_minimum_version:def:1" href="ssg-firefox-oval.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-sync" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox accounts must be disabled.</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox accounts feature may be disabled via administrative policy by setting
<html:code xmlns:html="http://www.w3.org/1999/xhtml">DisableFirefoxAccounts</html:code> under <html:code xmlns:html="http://www.w3.org/1999/xhtml">policies</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000034</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable Firefox Accounts integration (Sync). 
It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. These unnecessary capabilities or services are often overlooked and therefore may remain unsecured. They increase the risk to the platform by providing additional attack vectors.
Applications are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).
Examples of non-essential capabilities include but are not limited to advertising software or browser plug-ins that are not related to requirements or provide a wide array of functionality not required for every mission but that cannot be disabled.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-sync" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['DisableFirefoxAccounts'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-sync:def:1" href="ssg-firefox-oval.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-telemetry" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable Firefox Telemetry</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Telemetry can be disabled by setting
<html:code xmlns:html="http://www.w3.org/1999/xhtml">toolkit.telemetry.enabled</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">false</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000014</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The Telemetry feature provides this capability by sending performance and usage info to Mozilla. As you use Firefox, Telemetry measures and collects non-personal information, such as performance, hardware, usage and customizations. It then sends this information to Mozilla on a daily basis and we use it to improve Firefox</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-telemetry" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['DisableTelemetry'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-telemetry:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-telemetry_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-user_messaging" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox must not recommend extensions as the user is using the browser.</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The extension recommendation messages may be disabled in an administrative policy by setting
the <html:code xmlns:html="http://www.w3.org/1999/xhtml">ExtensionRecommendations</html:code> key under <html:code xmlns:html="http://www.w3.org/1999/xhtml">UserMessaging</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">false</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000028</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The Recommended Extensions program recommends extensions to users as they surf the web.
The user must not be encouraged to install extensions from the websites they visit. Allowed extensions are to be centrally managed.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-user_messaging" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'UserMessaging' in _tree['policies']:
   pass
else:
   _tree['policies']['UserMessaging'] = dict()

_tree['policies']['UserMessaging']['ExtensionRecommendations'] = False

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-user_messaging:def:1" href="ssg-firefox-oval.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-verification" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Enable Certificate Verification</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox can be configured to prompt the user to choose a certificate
to present to a website when asked. To enable certificate verification,
set <html:code xmlns:html="http://www.w3.org/1999/xhtml">security.default_personal_cert</html:code> to <html:code xmlns:html="http://www.w3.org/1999/xhtml">Ask Every Time</html:code>
in an administrative policies file</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000187</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">IA-5(2)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000003</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Websites within DoD require user authentication for access which increases
security for DoD information. Access will be denied to the user if
certificate management is not configured.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_policy-verification" system="urn:xccdf:fix:script:sh" strategy="policy">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'security.default_personal_cert' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['security.default_personal_cert'] = dict()

_tree['policies']['Preferences']['security.default_personal_cert']['Value'] = 'Ask Every Time'


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'security.default_personal_cert' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['security.default_personal_cert'] = dict()

_tree['policies']['Preferences']['security.default_personal_cert']['Status'] = 'locked'

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-firefox_policy-verification:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_policy-verification_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_firefox_preferences-auto-download_actions" selected="false" role="full" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable auto-download for proscribed MIME types.</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Firefox must be configured to not automatically execute or download MIME types that are not
authorized for auto-download.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-001242</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SI-3 c</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000006</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">This setting ensures that some file types that may be downloaded or executed without user interaction
are not downloaded and/or executed.</rationale>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-firefox_preferences-auto-download_actions_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="xccdf_org.ssgproject.content_rule_installed_firefox_version_supported" selected="false" role="full" severity="high">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Supported Version of Firefox Installed</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">If the system is joined to the Red Hat Network, a Red Hat Satellite Server,
or a yum server, run the following command to install updates:
<html:pre xmlns:html="http://www.w3.org/1999/xhtml">$ sudo yum update</html:pre>
If the system is not configured to use one of these sources, updates (in the form of RPM packages)
can be manually downloaded and installed using <html:code xmlns:html="http://www.w3.org/1999/xhtml">rpm</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-003376</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SA-22</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000001</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Use of versions of an application which are not supported by the vendor
are not permitted. Vendors respond to security flaws with updates and
patches. These updates are not available for unsupported version which
can leave the application vulnerable to attack.</rationale>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-installed_firefox_version_supported:def:1" href="ssg-firefox-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-installed_firefox_version_supported_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
      </check>
    </Rule>
    <Group id="xccdf_org.ssgproject.content_group_firefox_preferences-dod_root_certificate">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The DoD Root Certificate Is Required</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The Shared System Certificates store contains certificates that
applications can access for a single certificate repository.
If enabled, Firefox can access that single system certificate
repository. If the DoD root certificate is also installed into
the shared system certificate repository, Firefox will see and 
use the DoD root certificate as a valid certificate authority.</description>
      <Rule id="xccdf_org.ssgproject.content_rule_firefox_preferences-dod_root_certificate_installed" selected="false" role="full" severity="medium">
        <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The DoD Root Certificate Exists</title>
        <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The DoD root certificate should be installed in the Shared System Certificates store
for Firefox to be able to access the DoD certificate. To install the root certificated
into the Shared System Certificates store, copy the DoD root certificate into
<html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/pki/ca-trust/source/anchors</html:code>. Once the file is copied, run the following
command:
<html:pre xmlns:html="http://www.w3.org/1999/xhtml">$ sudo update-ca-trust extract</html:pre></description>
        <reference href="https://public.cyber.mil/stigs/cci/">CCI-000054</reference>
        <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">IA-5 (2)</reference>
        <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000016</reference>
        <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The DOD root certificate will ensure that the trust chain is
established for server certificates issued from the DOD CA.</rationale>
        <ident system="https://ncp.nist.gov/cce">CCE-82056-3</ident>
        <check system="http://scap.nist.gov/schema/ocil/2">
          <check-content-ref name="ocil:ssg-firefox_preferences-dod_root_certificate_installed_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
        </check>
      </Rule>
      <Rule id="xccdf_org.ssgproject.content_rule_firefox_preferences-enable_ca_trust" selected="false" role="full" severity="medium">
        <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Enable Shared System Certificates</title>
        <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The Shared System Certificates store makes NSS, GnuTLS, OpenSSL, and Java
share a default source for retrieving system certificate anchors and blacklist
information. Firefox has the capability of using this centralized store for its
CA certificates. If the Shared System Certificates store is disabled, it can
be enabled by running the following command:
<html:pre xmlns:html="http://www.w3.org/1999/xhtml">$ sudo update-ca-trust enable</html:pre></description>
        <reference href="https://public.cyber.mil/stigs/cci/">CCI-000054</reference>
        <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">AC-10</reference>
        <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The DOD root certificate will ensure that the trust chain is
established for server certificates issued from the DOD CA.</rationale>
        <ident system="https://ncp.nist.gov/cce">CCE-82057-1</ident>
        <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="firefox_preferences-enable_ca_trust" system="urn:xccdf:fix:script:sh">P11=$(readlink /etc/alternatives/libnssckbi.so*)
P11LIB="/usr/lib/pkcs11/p11-kit-trust.so"
P11LIB64="/usr/lib64/pkcs11/p11-kit-trust.so"

if ! [[ ${P11} == "${P11LIB64}" ]] || ! [[ ${P11} == "${P11LIB}" ]] ; then
   /usr/bin/update-ca-trust enable
fi
</fix>
        <check system="http://scap.nist.gov/schema/ocil/2">
          <check-content-ref name="ocil:ssg-firefox_preferences-enable_ca_trust_ocil:questionnaire:1" href="ssg-firefox-ocil.xml"/>
        </check>
      </Rule>
    </Group>
  </Group>
  <TestResult id="xccdf_org.open-scap_testresult_xccdf_org.ssgproject.content_profile_stig" start-time="2024-07-04T17:33:48-06:00" end-time="2024-07-04T17:33:48-06:00" version="0.1.73" test-system="cpe:/a:redhat:openscap:1.3.10">
    <benchmark href="/usr/share/xml/scap/ssg/content/ssg-firefox-xccdf.xml" id="xccdf_org.ssgproject.content_benchmark_FIREFOX"/>
    <title>OSCAP Scan Result</title>
    <identity authenticated="false" privileged="false">rbojorquez</identity>
    <profile idref="xccdf_org.ssgproject.content_profile_stig"/>
    <target>localhost</target>
    <target-address>127.0.0.1</target-address>
    <target-address>192.168.122.1</target-address>
    <target-address>0:0:0:0:0:0:0:1</target-address>
    <target-facts>
      <fact name="urn:xccdf:fact:scanner:name" type="string">OpenSCAP</fact>
      <fact name="urn:xccdf:fact:scanner:version" type="string">1.3.10</fact>
      <fact name="urn:xccdf:fact:asset:identifier:fqdn" type="string">localhost</fact>
      <fact name="urn:xccdf:fact:asset:identifier:host_name" type="string">localhost.localdomain</fact>
      <fact name="urn:xccdf:fact:ethernet:MAC" type="string">00:00:00:00:00:00</fact>
      <fact name="urn:xccdf:fact:asset:identifier:mac" type="string">00:00:00:00:00:00</fact>
      <fact name="urn:xccdf:fact:ethernet:MAC" type="string">E0:D4:E8:94:E3:00</fact>
      <fact name="urn:xccdf:fact:asset:identifier:mac" type="string">E0:D4:E8:94:E3:00</fact>
      <fact name="urn:xccdf:fact:ethernet:MAC" type="string">52:54:00:D2:80:CD</fact>
      <fact name="urn:xccdf:fact:asset:identifier:mac" type="string">52:54:00:D2:80:CD</fact>
      <fact name="urn:xccdf:fact:asset:identifier:ipv4" type="string">127.0.0.1</fact>
      <fact name="urn:xccdf:fact:asset:identifier:ipv4" type="string">192.168.122.1</fact>
      <fact name="urn:xccdf:fact:asset:identifier:ipv6" type="string">::1</fact>
    </target-facts>
    <set-value idref="xccdf_org.ssgproject.content_value_var_default_home_page">about:blank</set-value>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-addons_permission" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-autoplay_video" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-content_blocker" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notselected</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-cryptomining" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-development_tools" role="full" time="2024-07-04T17:33:48-06:00" severity="low" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-disable_deprecated_ciphers" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-disable_form_history" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-disable_pocket" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-disable_studies" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-dns_over_https" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-encrypted_media_extensions" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-enhanced_tracking" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-extension_recommendation" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-extension_update" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-feedback_reporting" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-fingerprinting_protection" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-forget_button" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-javascript_window_changes" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-javascript_window_resizing" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-network_prediction" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-no_sanitize_on_shutdown" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-nonessential_capabilities" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-password_manager" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-pop-up_windows" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-private_browsing" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-search_suggestion" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-search_update" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-ssl_minimum_version" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-sync" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-telemetry" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-user_messaging" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_policy-verification" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_preferences-auto-download_actions" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_installed_firefox_version_supported" role="full" time="2024-07-04T17:33:48-06:00" severity="high" weight="1.000000">
      <result>notapplicable</result>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_preferences-dod_root_certificate_installed" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notapplicable</result>
      <ident system="https://ncp.nist.gov/cce">CCE-82056-3</ident>
    </rule-result>
    <rule-result idref="xccdf_org.ssgproject.content_rule_firefox_preferences-enable_ca_trust" role="full" time="2024-07-04T17:33:48-06:00" severity="medium" weight="1.000000">
      <result>notselected</result>
      <ident system="https://ncp.nist.gov/cce">CCE-82057-1</ident>
    </rule-result>
    <score system="urn:xccdf:scoring:default" maximum="100.000000">0.000000</score>
  </TestResult>
</Benchmark>